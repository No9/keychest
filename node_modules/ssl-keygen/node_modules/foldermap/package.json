{
  "author": {
    "name": "Karl D端端na",
    "email": "karl.dyyna@gmail.com"
  },
  "name": "foldermap",
  "description": "Module for mapping folder structure to object",
  "keywords": [
    "folder",
    "files",
    "map"
  ],
  "version": "0.1.2",
  "repository": {
    "type": "git",
    "url": "git@github.com:DeadAlready/node-foldermap"
  },
  "main": "lib/map.js",
  "dependencies": {
    "mkdirp": "0.3.x",
    "rimraf": "2.0.x"
  },
  "devDependencies": {
    "vows": "0.6.x"
  },
  "scripts": {
    "test": "node test/test.js"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.8.0"
  },
  "readme": "[foldermap](https://github.com/DeadAlready/node-foldermap) is a simple folder mapper for node.\n\n# Installation\n\n    $ npm install foldermap\n\n# Usage\n\nfoldermap traverses the folders in a given path and maps them into objects with the following properties:\n\n    {\n      _name: //Filename with extension\n      _base: //Filename without extension\n      _ext:  //Extension\n      _type: //'file' or 'directory'\n      _path: //Full path to the file\n      \n      //These properties are only assigned for files\n      _content: //Handle to access file content synchronously.\n      \n      //These are functions that exist only on files\n      _read: //Handle for reading file contents\n      _write: //Handle for writing file contents\n      \n      //These are functions that are assigned for directory's only\n      _add: //Function for adding subfolders or files\n      \n      //These are functions that are assigned for both files and folders\n      _delete: //Handle for deleting the file or folder(with all subfolders and files)\n    }\n\nThose properties are not enumerable. For directories the files are added as enumerable properties\nwith _name being the key\n\n## Basic usage\n\nThe foldermap function execution depends on the input arguments, \nif map receives a function as the second argument the mapping is executed \nasynchronously and callback is called with (err, map), \nif no callback is provided then the function is executed synchronously returning the map\nor throwing an error if one occurs\n\n    //Async\n    require('foldermap').map('./testFolder', function(err, map){\n      console.log(map);\n    });\n    //Sync\n    var map = require('foldermap').map('./testFolder');\n\n## Advanced usage\n\nInstead of path string you can also pass in an object or an array of objects with the following properties\n\n* path - required, the string path of file\n* type - limit the files to have a specific extension\n* match - regular expression string to match filename against\n* recursive - whether to traverse folders recursively, defaults to true\n* name - the name used for the property if file is in a list\n\n### Example\n\n    var map = require('foldermap').map([{\n      path:'./testFolder',\n      recursive: false,\n      type: 'json'\n    },{\n      path:'./testFolder2',\n      recursive: false,\n      type: 'json',\n      name: 'test2'\n    }]);\n\n## Map API\n\nFoldermap will return an map object of the folder with each \nelement having several convenience handles for access.\n\n### _name\n\nFilename with extension\n\n### _base\n\nFilename without extension\n\n### _path\n\nFull path to file\n\n### _ext\n\nFile extension. For example for config.json it would return json \n\n### _type\n\n'file' or 'directory'\n\n### _content\n\n_content is a special property allowing access to file contents. It only exists on file objects.\n \nThe following lines are equal.\n\n    var c = map.file._content;\n    // is the same as\n    var c = require('fs').readFileSync(map.file._path,'utf8');\n\nWriting is also possible.\n\n    map.file._content = 'Hello';\n    // is the same as\n    require('fs').writeFileSync(map.file._path,'Hello','utf8');\n\n### _read()\n\n_read is a function that allows to read the file contents. Unlike the _content property, \n_read also allows to read the contents asynchronously or get access to the readStream object.\n\nIf a callback is provided for the _read function then the file contents are \nread asynchronously and returned to the callback.\n\n    map.file._read(function(err, contents){\n      console.log(contents);\n    });\n\nIf no callback is provided then a readstream object is returned\n\n    var stream = map.file._read();\n    stream.on('data',function(data){\n      //Here we get data\n    });\n\n### _write()\n\n_write is analogous to _read. It allows to write the contents of the file async or get the writeStream object.\nThe function takes up to 2 arguments -> content, callback\n\nIf only the content is provided, then it works the same as using _content property\n\n    map.file._write('Hello');\n    // is the same as\n    map.file._content = 'Hello';\n\nIf the callback is also provided then the file write will occur async. In async mode the content input can also be a buffer.\n\n    map.file._write('Hello',function(err){\n      if(!err){\n        console.log('Successfully written');\n      }\n    });\n\nIf no arguments are provided then a writeStream object is returned.\n\n    var stream = map.file._write();\n    stream.write('Hello');\n\n### _delete()\n\n_delete function allows the deletion of files and folders. \nIt acts differently depending on the object in question.\n\n#### Files\n\nOptional callback can be provided determining whether the function is ran sync or async.\n\n    map.file._delete(); // Synchronous\n\n    map.file._delete(function(err){\n      if(!err){\n        console.log('File deleted');\n      }\n    });\n\n#### Folders\n\nOptional callback and force parameter can be provided. \n\nForce parameter will determine if the subfolders and files are deleted. Default is false.\nIf the folder is not empty and this parameter is not specified or specified as false then an error is either returned or thrown.\n\nCallback will determine if the function is ran sync or async.\n\nExamples\n\n    map.folder._delete(); // Synchronous without content deletion\n    map.folder._delete(true); // Synchronous with content deletion\n    \n    // Async non recursive\n    map.folder._delete(function(err){\n      if(!err){\n        console.log('Folder deleted');\n      }\n    });\n\n    // Async recursive\n    map.folder._delete(true, function(err){\n      if(!err){\n        console.log('Folder deleted');\n      }\n    });\n\n### _add()\n\nThe _add function exists only on folders and can be used to add files or folders to the directory structure. \nThe added files and folders are automatically mapped and added to the object.\n\nThe _add function has the following arguments\n\n+ filePath: required //String or object determining the add path and type. - \nIf filePath is string then the file type is file. \nAs an object the filePath supports the .path and .type properties, where .type can be 'directory' or 'file'\n+ content: optional //The contents of the file added. - This parameter has no effect when adding a directory.\n+ callback: optional //Callback to invoke with the results. - Will determine if function runs sync or async\n\nExamples\n\n    // Calling with content will return the handle to the newly created file object\n    var hello = map.folder._add('test.txt','Hello');\n    // or\n    map.folder._add('test.txt','Hello',function(err, hello){\n      if(err){\n      // Something went wrong\n      }\n    });\n    // Hello will equal to map.folder['test.txt']\n    \n    //Calling without content will return the writeStream object for the newly created file.\n    var stream = map.folder._add('test2.txt');\n    // or\n    map.folder._add('test2.txt',function(err, stream){\n      if(err){\n      // Something went wrong\n      }\n    });\n## License\n\nThe MIT License (MIT)\nCopyright (c) 2012 Karl D端端na\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "foldermap@0.1.2",
  "dist": {
    "shasum": "ec5e5a3c6fabf6302422577f29aa9a8bf86b5e8d"
  },
  "_from": "foldermap@0.1.x",
  "_resolved": "https://registry.npmjs.org/foldermap/-/foldermap-0.1.2.tgz"
}
